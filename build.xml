<project name="reconcile-hbase" default="compile" basedir="." >

	<description>Code to interact with hbase</description>

	<property name="antMavenBuildDir" value="../ant-maven-build"/>
	<import file="${antMavenBuildDir}/build.xml"/>
	

<!--  =================================================================== -->
<!--  run targets                     -->
<!--  =================================================================== -->
	<target name="createDocSchema" depends="compile" description="create the doc table">
		<echo>HBASE_HOME: ${env.HBASE_HOME}</echo>
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.table.DocSchema" failonerror="true">
			<classpath refid="classpath" />
			<arg value="${table}" />
		</java>
	</target>

	<target name="createEntitySchema" depends="compile">
		<java fork="yes" classname="reconcile.hbase.table.EntitySchema" failonerror="true">
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="createDisambigSchema" depends="compile">
		<java fork="yes" classname="reconcile.hbase.table.DisambiguatedEntitySchema" failonerror="true">
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="scanTable" depends="compile">
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.query.ScanTable" failonerror="true" classpathref="classpath">
			<jvmarg value="-Xmx2048m" />
			<arg value="${table}" />
		</java>
	</target>

	<target name="countTableRegions" depends="compile">
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.table.DocSchema" failonerror="true" classpathref="classpath">
			<jvmarg value="-Xmx2048m" />
			<arg value="${table}" />
			<arg value="-getRegionCount"/>
		</java>
	</target>

	<target name="showRows" depends="compile" description="show the row keys for a given column qualifier. params: table, col, qual">
		<echo>table name: ${table}</echo>
		<echo>col name: ${col}</echo>
		<echo>qual name: ${qual}</echo>
		<java fork="yes" classname="reconcile.hbase.query.ShowRows" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
			<arg value="${qual}" />
		</java>
	</target>
	
	<target name="measureRowSize" depends="compile" description="get histogram of row sizes for table. params: table, tick">
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.query.MeasureRowSizeDistribution" failonerror="true">
			<jvmarg value="-Xmx8g" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${tick}" />
		</java>
	</target>
	<target name="measureFamilySize" depends="compile" description="get histogram of row sizes for table. params: table, col, tick">
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.query.MeasureFamilySizeDistribution" failonerror="true">
			<jvmarg value="-Xmx8g" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
			<arg value="${tick}" />
		</java>
	</target>
	<target name="measureQualSize" depends="compile" description="get histogram of row sizes for table. params: table, col, qual, tick">
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.query.MeasureQualifierSizeDistribution" failonerror="true">
			<jvmarg value="-Xmx8g" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
			<arg value="${qual}" />
			<arg value="${tick}" />
		</java>
	</target>

	<target name="deleteContents" depends="compile">
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.query.DeleteContents" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
		</java>
	</target>
	<target name="deleteColumn" depends="compile">
		<echo>table name: ${table}</echo>
		<java fork="yes" classname="reconcile.hbase.query.DeleteColumn" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
			<arg value="${qual}" />
		</java>
	</target>

	<target name="countRows" depends="compile">
		<echo>table name: ${table}</echo>
		<echo>column name: ${col}</echo>
		<echo>qual name: ${qual}</echo>
		<java fork="yes" classname="reconcile.hbase.query.CountRows" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
			<arg value="${qual}" />
		</java>
	</target>

	<target name="countVals" depends="compile" description="count the values of a particular column. params: table; col; qual">
		<echo>table name: ${table}</echo>
		<echo>column name: ${col}</echo>
		<echo>qual name: ${qual}</echo>
		<java fork="yes" classname="reconcile.hbase.query.CountColumnValues" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
			<arg value="${qual}" />
		</java>
	</target>

	<target name="scanQuals" depends="compile" description="scan the column qualifiers in a family.  Ends with a count of each qual. params: table; col">
		<echo>hbase home: ${env.HBASE_HOME}</echo>
		<echo>hbase home: ${env.HBASE_HOME}/conf</echo>
		<echo>hbase home: ${env.HBASE_HOME}/conf/hbase-site.xml</echo>
		<echo>table name: ${table}</echo>
		<echo>column name: ${col}</echo>
		<java fork="yes" classname="reconcile.hbase.query.ScanColumnQualifiers" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
		</java>
	</target>

	<target name="getRow" depends="compile">
		<echo>table name: ${table}</echo>
		<echo>rowKey: ${row}</echo>
		<java fork="yes" classname="reconcile.hbase.query.GetRow" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${row}" />
		</java>
	</target>

	<target name="countAnnotations" depends="compile" description="count annotation strings. params: table, annot">
		<echo>table name: ${table}</echo>
		<echo>annotation name: ${annot}</echo>
		<java fork="yes" classname="reconcile.hbase.query.CountAnnotationValues" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${annot}" />
		</java>
	</target>

	<target name="countRowsWithOutColumn" depends="compile">
		<echo>table name: ${table}</echo>
		<echo>column name: ${col}</echo>
		<echo>qual name: ${qual}</echo>
		<java fork="yes" classname="reconcile.hbase.query.CountRowsWithEmptyColumn" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="${col}" />
			<arg value="${qual}" />
		</java>
	</target>

	<target name="scanColumn" depends="compile">
		<echo>table name: ${table}</echo>
		<echo>column name: ${col}</echo>
		<java fork="yes" classname="reconcile.hbase.query.ScanColumn" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="-fetch=${col}" />
		</java>
	</target>

	<target name="scanColumnQualifier" depends="compile">
		<echo>table name: ${table}</echo>
		<echo>column family: ${col}</echo>
		<echo>column qualifier: ${qual}</echo>
		<java fork="yes" classname="reconcile.hbase.query.ScanColumn" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="-fetch=${col}:${qual}" />
		</java>
	</target>

	<target name="scanColumnQualifierValue" depends="compile">
		<echo>table name: ${table}</echo>
		<echo>column family: ${col}</echo>
		<echo>column filterFamily: ${filterFamily}</echo>
		<echo>column filterColumn: ${filterColumn}</echo>
		<echo>column filterValue: ${filterValue}</echo>
		<java fork="yes" classname="reconcile.hbase.query.ScanColumn" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${table}" />
			<arg value="-fetch=${col}" />
			<arg value="-filter=${filterFamily}:${filterColumn}:${filterValue}" />
			<arg value="-numRows=5" />
			<!-- number of rows to print -->
		</java>
	</target>

	<!-- ========================== Ingest targets =============================== -->
	<target name="loadCorpus" depends="compile">
		<echo>input corpus dir: ${input}</echo>
		<echo>source name: ${src}</echo>
		<java fork="yes" classname="reconcile.hbase.ingest.CorpusLoader" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${src}" />
			<arg value="${input}" />
		</java>
	</target>

	<target name="loadHBase" depends="compile">
		<echo>input corpus dir: ${input}</echo>
		<echo>source name: ${src}</echo>
		<java fork="yes" classname="reconcile.hbase.SequenceLoader" failonerror="true">
			<jvmarg value="-Xmx2048m" />
			<classpath refid="classpath" />
			<arg value="${src}" />
			<arg value="${input}" />
		</java>
	</target>

	<target name="ingestNYT" depends="jars" description="M/R job to ingest NYT">
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.mapreduce.ingest.ImportNYT" />
			<!-- table -->
			<arg value="/data/nyt_dvd/fileList" />
			<arg value="NYT" />
		</exec>
	</target>

	<target name="parseNYT" depends="jars" description="M/R job to ingest NYT">
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.mapreduce.parse.ParseNYT" />
			<!-- table -->
			<arg value="/data/nyt_dvd/fileList" />
			<arg value="NYT" />
		</exec>
	</target>
	
	<!-- =================================================================== -->
	<!-- m/r query tasks -->
	<!-- =================================================================== -->

	<target name="countRowsMR" depends="jars" description="M/R job to count qualifiers. Params: table">
<echo>table: ${table} </echo>
<exec executable="${hadoop}" spawn="false">
	<arg value="jar" />
	<arg value="${depJarFile}" />
	<arg value="reconcile.hbase.query.mr.CountRows" />
	<!-- table -->
	<arg value="${table}" />
</exec>
</target>

	<target name="countRowsRegex" depends="jars" description="M/R job to count rows matching the given pattern. Params: table, col, qual, pattern">
		<echo>table: ${table} </echo>
		<echo>col: ${col} </echo>
		<echo>qual: ${qual} </echo>
		<echo>pattern: ${pattern} </echo>
<exec executable="${hadoop}" spawn="false">
	<arg value="jar" />
	<arg value="${depJarFile}" />
	<arg value="reconcile.hbase.query.mr.CountRowsWithRegexMatch" />
	<!-- table -->
	<arg value="${table}" />
	<arg value="${col}" />
	<arg value="${qual}" />
		<arg value="${pattern}" />
</exec>
</target>

	
	<target name="sizeRowsMR" depends="jars" description="M/R job to count size of rows. Params: table">
		<echo>table: ${table} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.SizeRows" />
			<!-- table -->
			<arg value="${table}" />
		</exec>
	</target>
	<target name="sizeCF" depends="jars" description="M/R job to count size of a column family. Params: table, col">
		<echo>table: ${table} </echo>
		<echo>column: ${col} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.SizeColumnFamily" />
			<!-- table -->
			<arg value="${table}" />
			<arg value="${col}" />
		</exec>
	</target>

	<target name="countQualRowsMR" depends="jars" description="M/R job to count qualifiers. Params: table; col; qual">
		<echo>table: ${table} </echo>
		<echo>column: ${col} </echo>
		<echo>qualifier: ${qual} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.CountQualifiers" />
			<!-- table -->
			<arg value="${table}" />
			<!-- column -->
			<arg value="${col}" />
			<!-- qualifier -->
			<arg value="${qual}" />
		</exec>
	</target>

	<target name="deleteIngest" depends="hadoopJar">
		<!-- description="M/R job to delete columns that look like dates in meta" -->
		<echo>Filter Source : ${src}</echo>
		<echo>Filter HDFS Key List File : ${keyList}</echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${hadoopJarFile}" />
			<arg value="reconcile.hbase.query.mr.DeleteIngest" />
			<arg value="-source=${src}" />
			<arg value="-keyList=${keyList}" />
		</exec>
	</target>

	<target name="deleteRowsMR" depends="hadoopJar">
		<!-- description="M/R job to delete rows with key OSC:" -->
		<echo>Filter Source : ${src}</echo>
		<echo>Filter HDFS Key List File : ${keyList}</echo>
		<echo>Delete column families : ${cf} [if empty all]</echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${hadoopJarFile}" />
			<arg value="reconcile.hbase.query.mr.DeleteRows" />
			<arg value="-source=${src}" />
			<arg value="-keyList=${keyList}" />
			<arg value="-cf=${cf}"/>
		</exec>
	</target>

	<target name="deleteLargeCF" depends="jars">
		<!-- description="M/R job to delete rows with key OSC:" -->
		<echo>table: ${table} </echo>
		<echo>column: ${col} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.DeleteLargeColumnFamily" />
			<arg value="${table}" />
			<arg value="${col}" />
		</exec>
	</target>
	<target name="deleteSourceRows" depends="jars">
		<!-- description="M/R job to delete rows with key OSC:" -->
		<echo>table: ${table} </echo>
		<echo>source name: ${src} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.DeleteSourceRows" />
			<arg value="${table}" />
			<arg value="${src}" />
		</exec>
	</target>

	<target name="countValsMR" depends="jars" description="M/R job to count qualifier values. Params: table; col; qual">
		<echo>table: ${table} </echo>
		<echo>column: ${col} </echo>
		<echo>qualifier: ${qual} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.CountQualifierValues" />
			<!-- table -->
			<arg value="${table}" />
			<!-- column -->
			<arg value="${col}" />
			<!-- qualifier -->
			<arg value="${qual}" />
		</exec>
	</target>

	<target name="scanQualsMR" depends="jars" description="M/R job to count qualifiers. Params: table; col">
		<echo>table: ${table} </echo>
		<echo>column: ${col} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.ScanQualifiers" />
			<!-- table -->
			<arg value="${table}" />
			<!-- column -->
			<arg value="${col}" />
		</exec>
	</target>

	<target name="scanQualsWithSrcMR" depends="jars" description="M/R job to count qualifiers of a given source. Params: table; col; src">
		<echo>table: ${table} </echo>
		<echo>column: ${col} </echo>
		<echo>source: ${src} </echo>
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${depJarFile}" />
			<arg value="reconcile.hbase.query.mr.ScanQualifiersWithSrc" />
			<!-- table -->
			<arg value="${table}" />
			<!-- column -->
			<arg value="${col}" />
			<!-- source -->
			<arg value="${src}" />
		</exec>
	</target>


	<target name="printNPs" depends="hadoopJar" description="print the different types of treebank tag counts">
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${hadoopJarFile}" />
			<arg value="reconcile.hbase.mapreduce.GenericMapper" />
			<arg value="-source=${src}" />
			<arg value="-keyList=${keyList}" />
			<arg value="-family=annotations" />
			<arg value="-family=text" />
			<arg value="-mapper=reconcile.hbase.mapper.PrintNPs" />
		</exec>
	</target>

	<target name="countWords" depends="hadoopJar" description="execute coref annotations over doc table ">
		<exec executable="${hadoop}" spawn="false">
			<arg value="jar" />
			<arg value="${hadoopJarFile}" />
			<arg value="reconcile.hbase.query.mr.CountParseWords" />
			<arg value="${src}" />
		</exec>
	</target>

	<target name="testZipInputFormat">
		<antcall target="hadoopTest">
			<param name="input" value="reconcile.hbase.mapreduce.ZipInputFormatTests"/>
		</antcall>
	</target>

	<target name="urlData" description="Get and print the data contents of specified url">
		<echo>url     : ${url}</echo>
		<echo>print   : ${print}</echo>
		<echo>contains: ${contains}</echo>
		<java fork="yes" classname="util.URLData" failonerror="true">
			<classpath refid="classpath"/>
			<arg value="-print=${print}" />
			<arg value="-url=${url}"/>
			<arg value="-contains=${contains}"/>
		</java>
	</target>

</project>
